'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bottlejs = require('bottlejs');

var _bottlejs2 = _interopRequireDefault(_bottlejs);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = new _debug2.default('koa-oai-router:container');

var Container = function () {
  function Container() {
    _classCallCheck(this, Container);

    this.bottle = new _bottlejs2.default();
  }

  _createClass(Container, [{
    key: 'get',
    value: function get(name) {
      debug('get', name, this.bottle.list());

      return this.bottle.container[String(name)];
    }
  }, {
    key: 'set',
    value: function set(name, pluginClass) {
      debug('before set', name, this.bottle.list());

      this.bottle.service(String(name), pluginClass);

      debug('after set', name, this.bottle.list());
    }
  }, {
    key: 'clear',
    value: function clear(name) {
      debug('before clear', name, this.bottle.list());

      delete this.bottle.container[String(name)];

      debug('after clear', name, this.bottle.list());
    }
  }, {
    key: 'tempGet',
    value: function tempGet(pluginClass, path, def) {
      var randomName = Math.random().toString(36).substr(2);

      this.bottle.service(randomName, pluginClass);

      var value = (0, _util.get)(this, `bottle.container.${randomName}.${path}`, def);
      debug('temp', path, value);

      this.clear(randomName);

      return value;
    }
  }]);

  return Container;
}();

exports.default = Container;