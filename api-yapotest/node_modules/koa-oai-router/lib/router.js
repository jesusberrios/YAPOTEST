'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _routerSuper = require('./router-super');

var _routerSuper2 = _interopRequireDefault(_routerSuper);

var _spec = require('./spec');

var _spec2 = _interopRequireDefault(_spec);

var _swagger = require('./swagger');

var _swagger2 = _interopRequireDefault(_swagger);

var _util = require('./util');

var util = _interopRequireWildcard(_util);

var _route = require('./util/route');

var _pluginRegister = require('./plugin-register');

var _pluginRegister2 = _interopRequireDefault(_pluginRegister);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = new _debug2.default('koa-oai-router');

var OAIRouter = function (_Router) {
  _inherits(OAIRouter, _Router);

  function OAIRouter() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, OAIRouter);

    var _this = _possibleConstructorReturn(this, (OAIRouter.__proto__ || Object.getPrototypeOf(OAIRouter)).call(this, opts));

    var apiDoc = opts.apiDoc,
        _opts$apiExplorerVisi = opts.apiExplorerVisible,
        apiExplorerVisible = _opts$apiExplorerVisi === undefined ? true : _opts$apiExplorerVisi,
        _opts$apiCooker = opts.apiCooker,
        apiCooker = _opts$apiCooker === undefined ? function (api) {
      return api;
    } : _opts$apiCooker,
        _opts$options = opts.options,
        options = _opts$options === undefined ? {} : _opts$options;

    (0, _assert2.default)(util.isString(apiDoc), 'apiDoc must be string.');
    (0, _assert2.default)(util.isFunction(apiCooker), 'apiCooker must be function.');

    _this.apiDoc = apiDoc;
    _this.apiExplorerVisible = apiExplorerVisible;
    _this.apiCooker = apiCooker;
    _this.options = options;

    _this.api = null;
    _this.pluginRegister = new _pluginRegister2.default(_this.options);
    return _this;
  }

  /**
   * Start to parse apiDoc and mount routes. Must called after all mount action is finished.
   * @public
   * @returns route dispatcher, koa middleware
   */


  _createClass(OAIRouter, [{
    key: 'routes',
    value: function routes() {
      var _this2 = this;

      (0, _spec2.default)(this.apiDoc).then(function () {
        var _ref = _asyncToGenerator(function* (api) {
          _this2.api = yield _this2.apiCooker(api);

          yield _this2.registerRoutes();
          yield _this2.registerApiExplorer();

          debug('router is ready...');
          _this2.emit('ready');
        });

        return function (_x2) {
          return _ref.apply(this, arguments);
        };
      }()).catch(function (error) {
        console.error('router boot error: ', error);

        _this2.emit('error', error);
      });

      return _get(OAIRouter.prototype.__proto__ || Object.getPrototypeOf(OAIRouter.prototype), 'routes', this).call(this);
    }

    /**
     * Register a handler of the field in OpenApi operation object.
     * @public true
     * @param {Plugin} plugin plugin object
     */

  }, {
    key: 'mount',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (pluginClass, args) {
        yield this.pluginRegister.register(pluginClass, args);
      });

      function mount(_x3, _x4) {
        return _ref2.apply(this, arguments);
      }

      return mount;
    }()

    /**
     * Initiate routes
     */

  }, {
    key: 'registerRoutes',
    value: function () {
      var _ref3 = _asyncToGenerator(function* () {
        var _this3 = this;

        var paths = util.get(this, 'api.paths', {});

        yield util.eachPromise(paths, function () {
          var _ref4 = _asyncToGenerator(function* (path, pathValue) {
            var endpoint = (0, _route.oai2koaUrlJoin)(_this3.api.basePath, path);

            yield util.eachPromise(pathValue, function () {
              var _ref5 = _asyncToGenerator(function* (operation, operationValue) {
                yield _this3.registerRoute(endpoint, operation, operationValue);
              });

              return function (_x7, _x8) {
                return _ref5.apply(this, arguments);
              };
            }());
          });

          return function (_x5, _x6) {
            return _ref4.apply(this, arguments);
          };
        }());
      });

      function registerRoutes() {
        return _ref3.apply(this, arguments);
      }

      return registerRoutes;
    }()

    /**
     * Initiate a single route to koa.
     */

  }, {
    key: 'registerRoute',
    value: function () {
      var _ref6 = _asyncToGenerator(function* (endpoint, operation, operationValue) {
        var middlewareOpts = {
          endpoint,
          operation,
          operationValue,
          options: this.options
        };

        var middlewares = yield this.pluginRegister.load(middlewareOpts);

        debug('middlewares', middlewares);
        debug(`mount ${operation.toUpperCase()} ${endpoint} ${util.map(middlewares, 'name').join(' > ')}`);
        this[operation](endpoint, ...middlewares);
      });

      function registerRoute(_x9, _x10, _x11) {
        return _ref6.apply(this, arguments);
      }

      return registerRoute;
    }()

    /**
     * OpenApi doc explorer
     * @public false
     */

  }, {
    key: 'registerApiExplorer',
    value: function registerApiExplorer() {
      var _this4 = this;

      if (this.apiExplorerVisible === false) return;
      debug(`apiExplorer: ${(0, _route.urlJoin)(this.options.prefix, 'api-explorer')}`);

      this.get('/api-explorer', function (ctx) {
        ctx.type = 'text/html';
        ctx.response.body = _swagger2.default.index;
      });

      this.get('/swagger-ui.css', function (ctx) {
        ctx.type = 'text/css';
        ctx.response.body = _swagger2.default.uiCss;
      });

      this.get('/swagger-ui-bundle.js', function (ctx) {
        ctx.type = 'application/javascript';
        ctx.response.body = _swagger2.default.bundleJs;
      });

      this.get('/swagger-ui-standalone-preset.js', function (ctx) {
        ctx.type = 'application/javascript';
        ctx.response.body = _swagger2.default.presetJs;
      });

      this.get('/api.json', function (ctx) {
        ctx.response.body = _this4.api;
      });

      this.get('/api-explorer-config.json', function (ctx) {
        ctx.response.body = {
          urls: [{ name: 'api-doc', url: (0, _route.urlJoin)(_this4.options.prefix, 'api.json') }],
          displayOperationId: true,
          displayRequestDuration: true,
          showExtensions: true,
          defaultModelsExpandDepth: 0
        };
      });
    }
  }]);

  return OAIRouter;
}(_routerSuper2.default);

exports.default = OAIRouter;