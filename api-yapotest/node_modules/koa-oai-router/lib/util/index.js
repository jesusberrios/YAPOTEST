'use strict';

var eachPromise = function () {
  var _ref = _asyncToGenerator(function* (obj, handler) {
    var keys = _.keys(obj);

    yield Promise.each(keys, function () {
      var _ref2 = _asyncToGenerator(function* (key) {
        var value = obj[key];

        yield handler(key, value);
      });

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());
  });

  return function eachPromise(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _ = require('lodash');
var Promise = require('bluebird');

function concatAt(target, path, fields) {
  var oldArr = _.get(target, path, []);
  var newArr = _.concat(oldArr, fields);

  _.set(target, path, _.compact(newArr));

  return target;
}

function concat(target, path, fields) {
  if (_.isString(fields)) {
    concatAt(target, path, fields);
  } else if (_.isArray(fields)) {
    _.each(fields, function (field) {
      concatAt(target, path, field);
    });
  }

  return target;
}

function compactFlatten(params) {
  return _.compact(_.flattenDeep(params));
}

module.exports = {
  isArray: _.isArray,
  isUndefined: _.isUndefined,
  isFunction: _.isFunction,
  isString: _.isString,
  get: _.get,
  set: _.set,
  pick: _.pick,
  each: _.each,
  every: _.every,
  map: _.map,
  concat,
  compactFlatten,
  eachPromise
};