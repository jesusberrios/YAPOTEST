'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _util = require('./util');

var util = _interopRequireWildcard(_util);

var _plugin = require('./plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _container = require('./container');

var _container2 = _interopRequireDefault(_container);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = new _debug2.default('koa-oai-router:plugin-register');

var PluginRegister = function () {
  function PluginRegister(options) {
    _classCallCheck(this, PluginRegister);

    // plugin class name
    this.registerSequence = [];
    // plugin fields
    this.fieldsSequence = {};
    // ioc container
    this.container = new _container2.default();
    // plugin config when new Router({options})
    this.options = options;
  }

  /**
   * Register a plugin.
   * @public
   * @param {class} pluginClass
   * @param {any} args
   */


  _createClass(PluginRegister, [{
    key: 'register',
    value: function () {
      var _ref = _asyncToGenerator(function* (pluginClass, args) {
        (0, _assert2.default)(pluginClass && pluginClass.prototype instanceof _plugin2.default, 'plugin must inherits from class Plugin.');

        var pluginName = this.container.tempGet(pluginClass, 'pluginName');
        var pluginClassName = this.container.tempGet(pluginClass, 'constructor.name');

        var argsByPluginName = util.get(this, `options.${pluginName}`);
        var argsByPluginClassName = util.get(this, `options.${pluginClassName}`);

        var name = pluginName || pluginClassName;
        var opts = argsByPluginName || argsByPluginClassName || args;

        debug('register new plugin', name, JSON.stringify(opts));

        this.plugin(name, pluginClass);
        this.plugin(name).check();
        this.plugin(name).setArgs(opts);

        yield this.plugin(name).init();
      });

      function register(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return register;
    }()

    /**
     * set or get a plugin.
     * @private
     * @param {string} name
     * @param {class} pluginClass
     */

  }, {
    key: 'plugin',
    value: function plugin(name, pluginClass) {
      if (name && pluginClass) {
        this.container.set(name, pluginClass);
        this.registerSequence.push(name);

        util.concat(this.fieldsSequence, name, this.container.get(name).field);

        return undefined;
      }

      return this.container.get(name);
    }

    /**
     * Load middlewares.
     * @private
     * @param {object} docOpts
     * @returns {object[]}
     */

  }, {
    key: 'load',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (docOpts) {
        var _this = this;

        var middlewares = yield _bluebird2.default.map(this.registerSequence, function () {
          var _ref3 = _asyncToGenerator(function* (pluginName) {
            debug('load', pluginName, docOpts);
            var middlewaresFields = yield _this.evokedMiddlewares(pluginName, docOpts);
            debug('middlewares fields', middlewaresFields);

            return middlewaresFields;
          });

          return function (_x4) {
            return _ref3.apply(this, arguments);
          };
        }());

        return util.compactFlatten(middlewares);
      });

      function load(_x3) {
        return _ref2.apply(this, arguments);
      }

      return load;
    }()

    /**
     * Load evoked middlewares from plugin fields in doc.
     * @private
     * @param {string} pluginName
     * @param {object} docOpts
     */

  }, {
    key: 'evokedMiddlewares',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (pluginName, docOpts) {
        var _this2 = this;

        var sequences = util.get(this, `fieldsSequence.${pluginName}`, []);
        var operationValue = util.get(docOpts, 'operationValue');
        debug(`evoked sequences: ${pluginName} ${sequences.join()}`);

        var middlewares = yield _bluebird2.default.map(sequences, function () {
          var _ref5 = _asyncToGenerator(function* (field) {
            var fieldValue = util.get(operationValue, field);

            // field not evoked
            if (!fieldValue) return null;

            var opts = _extends({
              field,
              fieldValue
            }, docOpts);

            var middleware = yield _this2.plugin(pluginName).middleware(opts);

            return middleware;
          });

          return function (_x7) {
            return _ref5.apply(this, arguments);
          };
        }(), { concurrency: 10 });

        return middlewares;
      });

      function evokedMiddlewares(_x5, _x6) {
        return _ref4.apply(this, arguments);
      }

      return evokedMiddlewares;
    }()
  }]);

  return PluginRegister;
}();

exports.default = PluginRegister;