'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _util = require('./util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = new _debug2.default('koa-oai-router:plugin');

var Plugin = function () {
  function Plugin() {
    _classCallCheck(this, Plugin);
  }

  _createClass(Plugin, [{
    key: 'check',
    value: function check() {
      (0, _assert2.default)(util.isString(this.field) || util.isArray(this.field) && util.every(this.field, util.isString), 'field must be string or [string].');
      (0, _assert2.default)(util.isString(this.pluginName) || util.isUndefined(this.pluginName), 'pluginName must be string.');
      (0, _assert2.default)(util.isFunction(this.init) || util.isUndefined(this.init), 'init must be function.');
      (0, _assert2.default)(util.isFunction(this.before) || util.isUndefined(this.before), 'before must be function.');
      (0, _assert2.default)(util.isFunction(this.handler), 'handler must be function, and return a koa middleware.');
      (0, _assert2.default)(util.isFunction(this.after) || util.isUndefined(this.after), 'after must be function.');
    }

    // set plugin arguments

  }, {
    key: 'setArgs',
    value: function setArgs(args) {
      debug(`${this.constructor.name} setArgs:`, args);
      this.args = args;
    }

    // optional override, init only once

  }, {
    key: 'init',
    value: function () {
      var _ref = _asyncToGenerator(function* () {
        return null;
      });

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    // optional override

  }, {
    key: 'before',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (docOpts) {
        return null;
      });

      function before(_x) {
        return _ref2.apply(this, arguments);
      }

      return before;
    }()

    // must override

  }, {
    key: 'handler',
    value: function () {
      var _ref3 = _asyncToGenerator(function* (docOpts) {
        throw new Error('Plugin must implement handler function.');
      });

      function handler(_x2) {
        return _ref3.apply(this, arguments);
      }

      return handler;
    }()

    // optional override

  }, {
    key: 'after',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (docOpts) {
        return null;
      });

      function after(_x3) {
        return _ref4.apply(this, arguments);
      }

      return after;
    }()

    /**
     * Create a plugin middleware.
     * @public false
     * @param {object} middlewareOpts
     * @param {object} middlewareOpts.api whole open api object
     * @param {string} middlewareOpts.endpoint endpoint
     * @param {string} middlewareOpts.field operationObject field name or extensions
     * @param {object} middlewareOpts.fieldValue operationObject field value
     * @param {string} middlewareOpts.operation http verbs https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object
     * @param {object} middlewareOpts.operationValue https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operationObject
     * @returns {function} koa middleware
     */

  }, {
    key: 'middleware',
    value: function () {
      var _ref5 = _asyncToGenerator(function* (middlewareOpts) {
        debug('convert to middleware: ', middlewareOpts);
        var pluginName = this.pluginName;
        var field = middlewareOpts.field;


        var newMiddlewareOpts = util.pick(middlewareOpts, ['api', 'endpoint', 'field', 'fieldValue', 'operation', 'operationValue']);
        var newMiddlewareArgs = this.args;

        debug('middleware arguments: ', newMiddlewareOpts, newMiddlewareArgs);

        // do something before.
        yield this.before(newMiddlewareOpts, newMiddlewareArgs);

        // wrap to middleware.
        var mw = yield this.handler(newMiddlewareOpts, newMiddlewareArgs);
        Object.defineProperty(mw || {}, 'name', { value: `${field}.${pluginName}` });

        // do something after.
        yield this.after(newMiddlewareOpts, newMiddlewareArgs);

        return mw;
      });

      function middleware(_x4) {
        return _ref5.apply(this, arguments);
      }

      return middleware;
    }()
  }]);

  return Plugin;
}();

exports.default = Plugin;